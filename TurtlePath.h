#pragma once
#include <memory>
#include <vector>
#include "IShape.h"
#include "TurtleState.h"
#include "Vector2.h"

namespace Engine
{
    /// \brief Defines a turtle path: a set of multi-lines that is
    /// procedurally generated by moving a "turtle" point around
    /// and drawing lines between successive positions.
    class TurtlePath
    {
    public:
        /// \brief Creates a new turtle path instance.
        TurtlePath();
        /// \brief Creates a turtle path from the given starting position and
        /// angle.
        TurtlePath(Vector2 Position, double Angle);

        /// \brief Moves the "turtle" forward by the given amount.
        void MoveForward(double Distance);

        /// \brief Pops and restores the turtle state at the top of the
        /// memento stack.
        void PopState();

        /// \brief Saves the turtle mesh's current state and pushes it onto
        /// the memento stack.
        void PushState();

        /// \brief Configures the turtle path to start drawing lines between
        /// successive positions.
        void StartDrawing();

        /// \brief Configures the turtle path to stop drawing lines.
        void StopDrawing();

        /// \brief Converts the turtle path into a drawable shape.
        std::shared_ptr<IShape> ToShape();

        /// \brief Turns the "turtle" left by the specified angle.
        void TurnLeft(double Angle);

        /// \brief Turns the "turtle" right by the given angle.
        void TurnRight(double Angle);
    private:
        /// \brief "Flushes" the turtle path's points, turning them into
        /// shapes.
        void FlushPoints();

        std::vector<TurtleState> mementos;
        bool penDown;
        std::vector<Vector2> points;
        std::vector<std::shared_ptr<IShape>> shapes;
        TurtleState state;
    };
}